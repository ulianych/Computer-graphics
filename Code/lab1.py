# -*- coding: utf-8 -*-
"""Untitled.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KFWrKBm-4hGEgwM0WOecK4rWluFkoWPQ
"""

from tkinter import *
from tkinter import ttk
from tkinter import messagebox as mb
from tkinter import colorchooser
import tkinter

flag1, flag2, flag3 = True, True, True
rec = 0

def rgb2cmyk(r, g, b):
    eps = 10e-10
    k = 1 - max(r, g, b) / 255
    c = (1 - r / 255 - k) / (1 - k + eps)
    m = (1 - g / 255 - k) / (1 - k + eps)
    y = (1 - b / 255 - k) / (1 - k + eps)
    return int(c * 100), int(m * 100), int(y * 100), int(k * 100)


def cmyk2rgb(c, m, y, k):
    c /= 100
    m /= 100
    y /= 100
    k /= 100

    r = 255 * (1 - c) * (1 - k)
    g = 255 * (1 - m) * (1 - k)
    b = 255 * (1 - y) * (1 - k)
    return int(r), int(g), int(b)


def rgb2hsl(r, g, b):
    eps = 10e-10

    r /= 255
    g /= 255
    b /= 255

    max_color = max(r, g, b)
    min_color = min(r, g, b)

    l = (min_color + max_color) / 2
    s = 0

    if l <= 0.5:
        s = (max_color - min_color) / (max_color + min_color + eps)
    else:
        s = (max_color - min_color) / (2 - max_color - min_color + eps)

    if max_color == r:
        h = (g - b) / (max_color - min_color + eps)
    elif max_color == g:
        h = 2 + (b - r) / (max_color - min_color + eps)
    else:
        h = 4 + (r - g) / (max_color - min_color + eps)
    h *= 60

    if h < 0:
        h += 360

    return int(h), int(s * 100), int(l * 100)


def hsl2rgb(h, s, l):

    s /= 100
    l /= 100

    c = (1 - abs(2 * l - 1)) * s
    x = c * (1 - abs((h / 60) % 2 - 1))
    m = l - c / 2

    if 0 <= h < 60:
         r1, g1, b1 = c, x, 0
    elif 60 <= h < 120:
        r1, g1, b1 = x, c, 0
    elif 120 <= h < 180:
        r1, g1, b1 = 0, c, x
    elif 180 <= h < 240:
        r1, g1, b1 = 0, x, c
    elif 240 <= h < 300:
        r1, g1, b1 = x, 0, c
    elif 300 <= h < 360:
        r1, g1, b1 = c, 0, x

    r, g, b = (r1 + m) * 255, (g1 + m) * 255, (b1 + m) * 255

    return int(r), int(g), int(b)


def get_rgb(rgb):
    return "#%02x%02x%02x" % rgb


def change_R(R):
    R = float(R)
    txt_R.delete(0, END)
    txt_R.insert(INSERT, int(R))
    click_button1()

def change_G(G):
    G = float(G)
    txt_G.delete(0, END)
    txt_G.insert(INSERT, int(G))
    click_button1()

def change_B(B):
    B = float(B)
    txt_B.delete(0, END)
    txt_B.insert(INSERT, int(B))
    click_button1()

def change_C(C):
    C = float(C)
    txt_C.delete(0, END)
    txt_C.insert(INSERT, int(C))
    click_button2()

def change_M(M):
    M = float(M)
    txt_M.delete(0, END)
    txt_M.insert(INSERT, int(M))
    click_button2()

def change_Y(Y):
    Y = float(Y)
    txt_Y.delete(0, END)
    txt_Y.insert(INSERT, int(Y))
    click_button2()

def change_K(K):
    K = float(K)
    txt_K.delete(0, END)
    txt_K.insert(INSERT, int(K))
    click_button2()

def change_H(H):
    H = float(H)
    txt_H.delete(0, END)
    txt_H.insert(INSERT, int(H))
    click_button3()

def change_S(S):
    S = float(S)
    txt_S.delete(0, END)
    txt_S.insert(INSERT, int(S))
    click_button3()

def change_L(L):
    L = float(L)
    txt_L.delete(0, END)
    txt_L.insert(INSERT, int(L))
    click_button3()

def update(RGB, CMYK, HSL):

    global rec
    rec += 1

    R, G, B = RGB
    C, M, Y, K = CMYK
    H, S, L = HSL

    txt_R.delete(0, END)
    txt_R.insert(INSERT, int(R))

    txt_G.delete(0, END)
    txt_G.insert(INSERT, int(G))

    txt_B.delete(0, END)
    txt_B.insert(INSERT, int(B))


    txt_C.delete(0, END)
    txt_C.insert(INSERT, int(C))

    txt_M.delete(0, END)
    txt_M.insert(INSERT, int(M))

    txt_Y.delete(0, END)
    txt_Y.insert(INSERT, int(Y))

    txt_K.delete(0, END)
    txt_K.insert(INSERT, int(K))


    txt_H.delete(0, END)
    txt_H.insert(INSERT, int(H))

    txt_S.delete(0, END)
    txt_S.insert(INSERT, int(S))

    txt_L.delete(0, END)
    txt_L.insert(INSERT, int(L))

    RGB = R, G, B

    global flag1
    global flag2
    global flag3

    if flag1:
        flag1 = False
        scale_R.set(int(R))
        scale_G.set(int(G))
        scale_B.set(int(B))

    if flag2:
        flag2 = False
        scale_C.set(int(C))
        scale_M.set(int(M))
        scale_Y.set(int(Y))
        scale_K.set(int(K))

    if flag3:
        flag3 = False
        scale_H.set(int(H))
        scale_L.set(int(L))
        scale_S.set(int(S))

    if not (flag1 or flag2 or flag3) and rec == 1:
        flag1, flag2, flag3 = [True] * 3

    rec -= 1

    root["bg"] = get_rgb(RGB)


def choose_color():

    color_code = colorchooser.askcolor(title ="Choose color")

    if color_code[0] is None:
        return

    print(color_code)

    RGB = color_code[0]

    CMYK = rgb2cmyk(*RGB)

    HSL = rgb2hsl(*RGB)

    update(RGB, CMYK, HSL)


def click_button1():
    R = txt_R.get()
    G = txt_G.get()
    B = txt_B.get()

    if not R.isdigit() or not G.isdigit() or not B.isdigit():
        tkinter.messagebox.showerror(title="Warning", message='Please, input numbers')
        return

    R = int(R)
    G = int(G)
    B = int(B)

    if min(R, G, B) < 0:
        tkinter.messagebox.showerror(title="Warning", message='Too little')
        return

    if max(R, G, B) > 255:
        tkinter.messagebox.showerror(title="Warning", message='Too much')
        return

    RGB = [R, G, B]

    update(RGB, rgb2cmyk(*RGB), rgb2hsl(*RGB))


def click_button2():
    C = txt_C.get()
    M = txt_M.get()
    Y = txt_Y.get()
    K = txt_K.get()

    if not C.isdigit() or not M.isdigit() or not Y.isdigit() or not K.isdigit():
        tkinter.messagebox.showerror(title="Warning", message='Где цифры, блять???')
        return

    C = int(C)
    M = int(M)
    Y = int(Y)
    K = int(K)

    if min(C, M, Y, K) < 0:
        tkinter.messagebox.showerror(title="Warning", message='Че так мало, блять???')
        return

    if max(C, M, Y, K) > 100:
        tkinter.messagebox.showerror(title="Warning", message='Че так много, блять???')
        return

    CMYK = C, M, Y, K

    update(cmyk2rgb(*CMYK), CMYK, rgb2hsl(*cmyk2rgb(*CMYK)))


def click_button3():
    H = txt_H.get()
    S = txt_S.get()
    L = txt_L.get()

    if not H.isdigit() or not S.isdigit() or not L.isdigit():
        tkinter.messagebox.showerror(title="Warning", message='Please, input numbers')
        return

    H = int(H)
    S = int(S)
    L = int(L)

    if min(S, L) < 0 or H < 0:
        tkinter.messagebox.showerror(title="Warning", message='Too little')
        return

    if max(S, L) > 100 or H > 359:
        tkinter.messagebox.showerror(title="Warning", message='Too much')
        return

    HSL = H, S, L

    update(hsl2rgb(*HSL), rgb2cmyk(*hsl2rgb(*HSL)), HSL)

color_code = (1, 1, 1)

root = Tk()

for j in range(3): root.columnconfigure(index=j, weight=1)
for i in range(14): root.rowconfigure(index=i, weight=1)

scale_R = ttk.Scale(orient=HORIZONTAL, length=200, from_=0.0, to=255.0, command=change_R)
scale_R.grid(row=1, column=2)
scale_G = ttk.Scale(orient=HORIZONTAL, length=200, from_=0.0, to=255.0, command=change_G)
scale_G.grid(row=2, column=2)
scale_B = ttk.Scale(orient=HORIZONTAL, length=200, from_=0.0, to=255.0, command=change_B)
scale_B.grid(row=3, column=2)
scale_C = ttk.Scale(orient=HORIZONTAL, length=200, from_=0.0, to=100.0, command=change_C)
scale_C.grid(row=5, column=2)
scale_M = ttk.Scale(orient=HORIZONTAL, length=200, from_=0.0, to=100.0, command=change_M)
scale_M.grid(row=6, column=2)
scale_Y = ttk.Scale(orient=HORIZONTAL, length=200, from_=0.0, to=100.0, command=change_Y)
scale_Y.grid(row=7, column=2)
scale_K = ttk.Scale(orient=HORIZONTAL, length=200, from_=0.0, to=100.0, command=change_K)
scale_K.grid(row=8, column=2)
scale_H = ttk.Scale(orient=HORIZONTAL, length=200, from_=0.0, to=359.0, command=change_H)
scale_H.grid(row=10, column=2)
scale_S = ttk.Scale(orient=HORIZONTAL, length=200, from_=0.0, to=100.0, command=change_S)
scale_S.grid(row=11, column=2)
scale_L = ttk.Scale(orient=HORIZONTAL, length=200, from_=0.0, to=100.0, command=change_L)
scale_L.grid(row=12, column=2)


btn_chooser = Button(root, text="Choose color", command=choose_color, width=20, height=3, bg = 'white')
btn_chooser.grid(row=0, column=0, columnspan=3, ipadx=70, ipady=6, padx=80, pady=5)

txt_R = Entry(root, width=15)
txt_G = Entry(root, width=15)
txt_B = Entry(root, width=15)

txt_R.grid(row=1, column=1)
txt_G.grid(row=2, column=1)
txt_B.grid(row=3, column=1)

label_R = Label(root, text='R:')
label_G = Label(root, text='G:')
label_B = Label(root, text='B:')

label_R.grid(row=1, column=0)
label_G.grid(row=2, column=0)
label_B.grid(row=3, column=0)

btn_1 = Button(root, text="Enter", command=click_button1, width=15)
btn_1.grid(row=4, column=1)

txt_C = Entry(root, width=15)
txt_M = Entry(root, width=15)
txt_Y = Entry(root, width=15)
txt_K = Entry(root, width=15)

txt_C.grid(row=5, column=1)
txt_M.grid(row=6, column=1)
txt_Y.grid(row=7, column=1)
txt_K.grid(row=8, column=1)

label_C = Label(root, text='C:')
label_M = Label(root, text='M:')
label_Y = Label(root, text='Y:')
label_K = Label(root, text='K:')

label_C.grid(row=5, column=0)
label_M.grid(row=6, column=0)
label_Y.grid(row=7, column=0)
label_K.grid(row=8, column=0)

btn_2 = Button(root, text="Enter", command=click_button2, width=15)
btn_2.grid(row=9, column=1)


txt_H = Entry(root, width=15)
txt_S = Entry(root, width=15)
txt_L = Entry(root, width=15)

txt_H.grid(row=10, column=1)
txt_S.grid(row=11, column=1)
txt_L.grid(row=12, column=1)

label_H = Label(root, text='H:')
label_S = Label(root, text='S:')
label_L = Label(root, text='L:')

label_H.grid(row=10, column=0)
label_S.grid(row=11, column=0)
label_L.grid(row=12, column=0)

btn_3 = Button(root, text="Enter", command=click_button3, width=15)
btn_3.grid(row=13, column=1)

root.geometry("500x600")
root.resizable(False, False)
update([255] * 3, [0] * 4, [0, 0, 100])

scale_R.set(255)
scale_G.set(255)
scale_B.set(255)
scale_C.set(0)
scale_M.set(0)
scale_Y.set(0)
scale_K.set(0)
scale_H.set(0)
scale_S.set(0)
scale_L.set(100)

root.title("Color conventer")
root.iconbitmap(default="rainbow.ico")
root.mainloop()


